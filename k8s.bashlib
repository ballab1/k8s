#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#  functions for 'k8s.app'
#----------------------------------------------------------------------------------------------

declare -r k8s_NO_ASCII='s|\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mK]||g'
declare -r SQL_FILE='2024-12-21.postgres.sql'
declare -r MAX_ITER=20

# -----------------------------------------------------------------------------------
function k8s.__init() {

    # shellcheck disable=SC2034
    START=$(date +%s)

    # Use the Unofficial Bash Strict Mode
    set -o errexit
    set -o nounset
    set -o pipefail
    IFS=$'\n\t'

    # declarations of MUST HAVE globals
    # shellcheck disable=SC2034
    [ "${PROGRAM_DIR:-}" ] || PROGRAM_DIR=-~/GIT/k8s
    [ "${BASHLIB_DIR:-}" ] || BASHLIB_DIR=~/.bin/utilities/bashlib
    # shellcheck disable=SC2034
    [ "${PROGRAM_NAME:-}" ] || PROGRAM_NAME="$(basename "${BASH_SOURCE[0]}" | sed 's|.sh$||')"

    # source other bashlibs
    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/trap.bashlib"
    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/timer.bashlib"
    trap k8s.onexit EXIT


    # import our setup configuration
    local configYaml='k8s.bashlib.yml'
    [ -f "$configYaml" ] || configYaml='k8s.bashlib.yaml'
    [ -f "$configYaml" ] || configYaml="${PROGRAM_DIR}/k8s.bashlib.yml"
    [ -f "$configYaml" ] || configYaml="${PROGRAM_DIR}/k8s.bashlib.yaml"
    k8s.parse_config "$(python3 -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout)' < "$configYaml")"
    if [ -z "${K8S_VERSION:-}" ]; then
        echo "invalid configuration file $configYaml"
        exit
    fi

    # shellcheck disable=SC2034
    DEBUG=0
    LASTTIME="$START"
    sudo usermod -a -G microk8s "$USER"


    [ -z "${KUBECTL:-}" ] && KUBECTL="microk8s.kubectl"
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.add_new_content() {

    echo 'adding new content'

    for app in "${K8S_APPS[@]}"; do
        k8s.run "$KUBECTL" create -f "${PROGRAM_DIR}/apps/${app}/" ||:
        sleep 30  # wait for initialization to complete
    done

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.add_nodes_to_cluster() {

    echo 'join nodes into cluster'
    local cmd ip node

    # get our local ip4 address
    ip="$(ip -4 -j address|jq -r '.[]|select(.qdisc == "fq_codel").addr_info[0].local')"

    # add nodes to cluster
    for node in "${K8S_NODES[@]}"; do
        [ "$node" = "$(hostname -f)" ] && continue
        [ -z "$(ssh "$node" 'which microk8s')" ] && continue
        cmd="$(sudo microk8s add-node | grep "$ip" | head -1)"
        [ -z "$cmd" ] && continue
        k8s.run ssh "$node" "$cmd"
        k8s.run ssh "$node" "microk8s status --wait-ready"
    done

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_config() {

    echo 'capturing config content'
    mkdir -p current ||:

    printf '\n\e[90m%s api-versions\e[0m\n' "${KUBECTL}"
    ("$KUBECTL" api-versions ||:) &> 'current/api-versions.txt'
    printf '\n\e[90m%s api-resources -o wide\e[0m\n' "${KUBECTL}"
    ("$KUBECTL" api-resources -o wide ||:) &> 'current/api-resources.txt'

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_ips_for_gui() {

    local ip_file='current/services_ips.json'

    echo 'capturing IPs for GUI'
    mkdir -p current ||:
    "$KUBECTL" get services -A -o json |  jq '[.items[]|select(.spec.clusterIP != "None")|{"title":.metadata.name, "host": .spec.clusterIP, "port":.spec.ports[0].port}]' > "$ip_file"
    jq -r '[.[]|"  \(.title): \(.host):\(.port)"]|sort[]' "$ip_file"
    if [ "$K8S_CLUSTERNAME" = 'prodk8s' ]; then
      scp "$ip_file" s3:production/workspace.production/www/
      sudo cp "$ip_file" /mnt/k8s/web/
    fi
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_status() {

    echo 'capturing status'
    mkdir -p current ||:
    k8s.run "$KUBECTL" cluster-info | tee current/cluster-info.txt
    k8s.run "$KUBECTL" get nodes | tee current/nodes.txt
    k8s.run "$KUBECTL" get all -A | tee current/all.txt
    (k8s.dump_apis)

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.create_app() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.load_namespace "$dir"
    done
}

# -----------------------------------------------------------------------------------
function k8s.create_secrets_for_apps() {

    local -r target="${1:?}"
    local -r certs="${2:-certs}"

    [[ -e "$certs" && -e "$certs" ]] || return 0
    local name
    while read -r file; do
        name="$(echo "${target,,}${file//$certs/}" | sed -e 's|[/\.]|-|g')"
        "$KUBECTL" create secret generic "$name" --dry-run=client --from-file="$file" -o yaml > "${target}/02.Secret.${name}.yaml"
    done < <(find "$certs" -mindepth 1 -maxdepth 1 -type f)
}

# -----------------------------------------------------------------------------------
function k8s.customize_content() {

    echo 'customizing content'
    local -r names="$("$KUBECTL" get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"

    if [ -d "production/patches.${K8S_VERSION}" ];then
        local ns object status
        while read -r patchFile;do
            # extract namespace from patchFile name
            ns="$(basename "${patchFile}")"
            ns="${ns%%.*}"
            grep -qE "^${ns}\$" <<< "$names" || continue

            # extract obect from patchFile name
            object="$(basename "${patchFile%.*}")"
            object="${object#*.}"
            object="${object//.//}"
            [ "${object:-}" = 'daemonset' ] && object='daemonset.app'

            if ("$KUBECTL" get -n "$ns" "$object"); then
                # patch object
                k8s.run "$KUBECTL" patch "$object" -n "$ns" --patch-file=<(envsubst < "$patchFile") --type='merge' && status=$? || status=$?
                if [ "$status" -ne 0 ]; then
                    printf '\x1b[31m**** ERROR: %s\x1b[0m\n' "$patchFile" >&2
                    envsubst < "$patchFile"
                fi
            fi
        done < <(find "production/patches.${K8S_VERSION}" -mindepth 1 -maxdepth 1 -type f -name '*.yaml')
    fi

    if [ -d "production/microk8s.${K8S_VERSION}" ];then
        # update default apps
        k8s.run "$KUBECTL" create -f "production/microk8s.${K8S_VERSION}/" ||:
        sleep 30  # wait for initialization to complete
    fi

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.dump_apis() {

    echo 'dump K8S apis'

    local ext mode object
    local -a types=('by_class' 'by_mode')
    local -a modes=('wide' 'json' 'yaml')
    local -r API_DIR='current/apis'

    # setup directories for files
    rm -rf "${API_DIR}"
    mkdir -p "${API_DIR}/classes" ||:
    for mode in "${modes[@]}"; do
        [ -d "${API_DIR}/$mode" ] && mkdir -p "${API_DIR}/$mode"
        mkdir -p "${API_DIR}/$mode" ||:
    done

    # populate directories
    while read -r object; do
        echo "  $object"
        for tp in "${types[@]}"; do
            [ -d "${API_DIR}/classes/${object}" ] || (mkdir -p "${API_DIR}/classes/${object}" ||:)
            for mode in "${modes[@]}"; do
                ext="$mode"
                [ "$mode" = 'wide' ] && ext='txt'
                if [ "$tp" = 'by_class' ]; then
                    "$KUBECTL" get "$object" -A -o "$mode" &> "${API_DIR}/classes/${object}/${mode}.$ext" ||:
                else
                    "$KUBECTL" get "$object" -A -o "$mode" &> "${API_DIR}/${mode}/${object}.$ext" ||:
                fi
            done
        done
    done < <("$KUBECTL" api-resources --no-headers=false -o=name --sort-by=name)

    "$KUBECTL" api-resources --sort-by=name --output wide > "${API_DIR}/api-resourses.txt"

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.enable_microk8s_modules() {

    echo 'enable microk8s modules'

    for module in "${K8S_MODULES[@]}";do
        k8s.run sudo microk8s enable "$module" ||:
        sleep 5  # wait for initialization to complete
        sync; sync
    done

    k8s.run microk8s status --wait-ready
    k8s.run sudo iptables --flush
    k8s.run sudo iptables -P FORWARD ACCEPT

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.generate_token() {

    echo 'generating tokens.inf'
    mkdir -p current ||:
    local tokenFile='current/tokens.inf'
    :> "$tokenFile"
    for token in 'default-token' 'admin-user' ; do
        local ref="$("$KUBECTL" -n kube-system get secret | grep "$token" ||:)"
        [ "${ref:-}" ] && ref="$(awk '{print $1}' <<< "$ref")"
        # shellcheck disable=SC2181
        [[ "$?" != 0 || -z "${ref:-}" ]] && continue
        local result="$(k8s.run "$KUBECTL" -n kube-system describe secret "$ref" ||:)"
        [ -z "${result:-}" ] && continue
        echo "$result" > "$tokenFile"
        break
    done

    # if token file is not found, create one
    if [ -z "$(< "$tokenFile")" ] && [ "${FUNCNAME[1]}" != "${FUNCNAME[0]}" ]; then
        "$KUBECTL" apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: default-token
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token
EOF
        sleep 3
        k8s.generate_token
    fi
    [ "$(< "$tokenFile")" ] || (rm "$tokenFile" ||:)

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.get_last_SQL_BACKUP() {

   echo "/home/bobb/workspace/${SQL_FILE}"
}

# -----------------------------------------------------------------------------------
function k8s.install_app() {

    [ "$#" -eq 0 ] && return 0

    k8s.remove_app "$@"
    k8s.create_app "$@"
    "$KUBECTL" get all
}

# -----------------------------------------------------------------------------------
function k8s.install_krew() {

#    set -x
    TEMP="$(mktemp -d)"
    cd "$TEMP"
    OS="$(uname | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"
    KREW="krew-${OS}_${ARCH}"
    curl --silent \
         --fail \
         --location \
         --remote-name \
         --show-error \
         --request GET "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz"
    tar zxvf "${KREW}.tar.gz"
    "./$KREW" install krew ||:
    return 0
}

# -----------------------------------------------------------------------------------
# shellcheck disable=SC2120
function k8s.journalctl() {

    [ -z "$(which microk8s)" ] && return 0

    # shellcheck disable=SC2034
    for i in {1..4}; do
        [ "$(microk8s status)" == 'microk8s is not running. Use microk8s inspect for a deeper inspection.' ] || return 0
    done

    local -r identifier="${1:-microk8s.daemon-kubelite}"
    local -r start="${2:-$START}"
    local -r end="${3:-$(date +'%s')}"

    echo
    echo
    # shellcheck disable=SC2086
    echo "journalctl --reverse --output=verbose --identifier='${identifier}' --since $(date +'%Y-%m-%d %H:%M:%S' --date=@${start}) --until $(date +'%Y-%m-%d %H:%M:%S' --date=@${end})"
#    journalctl --reverse --output=verbose --identifier="${identifier}" --since "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${start}")" --until "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${end}")"
    journalctl --reverse --output=verbose --since "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${start}")" --until "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${end}")"
    exit 1
}

# -----------------------------------------------------------------------------------
function k8s.jsonnet() {

    [ "$#" -eq 0 ] && return 0
    export JSONNET_PATH="${JSONNET_PATH:-}:https://raw.eos2git.cec.lab.emc.com/TechOps/k8s-libsonnet/upstream-main/1.20/"
    local text="$(docker run --rm --tty --volume "$(pwd):$(pwd)" --workdir "$(pwd)" "$JSONNET_IMAGE" "$@")" ||:
    echo "$text"
}

# -----------------------------------------------------------------------------------
function k8s.load_namespace() {

    local -r dir="${1:?}"
    local -r verb="${2:-create}"

    local direction=''
    [ "$verb" = 'delete' ] && direction='-r'

    local file status
    while read -r file; do
        ("$KUBECTL" "$verb" -f "${file}") && status=$? || status=$?
        [ "$verb" = 'delete' ] && continue
        [ "${status:-0}" -ne 0 ] && exit
    done < <(find "production/${dir}" -type f | LC_ALL=C sort -n $direction)
    echo
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.log_elapsed() {

    [ "${DEBUG:-0}" -eq 0 ] && return 0
    mkdir -p current ||:

    local -r text="${1:-}"
    local now=$(timer.getTimestamp)

    printf '\n%s %s %s\n\n' "$(date -Ins)" "$text" "$(timer.fmtElapsed "$((now - LASTTIME))")" | tee -a current/elapsed.times.txt

    LASTTIME="$now"
    stty sane
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.onexit() {

    if [ "${REMOTE:-}" ]; then
        declare node
        for node in "${K8S_NODES[@]}"; do
            # shellcheck disable=SC2029
            ssh "$node" "[ -e '${REMOTE:-}' ] && rm '${REMOTE:-}' ||:"
        done
    fi

    [ "${TEMP:-}" ] && [[ "${TEMP:-}" =~ /tmp/* ]] && [ -d "$TEMP" ] && rm -rf "$TEMP"

    k8s.journalctl

    local -i delta="$(timer.getTimestamp)"
    delta="$(( delta - START ))"

    mkdir -p current ||:
    [ "$delta" -lt 3 ] || printf '\n\n%s %s %s\n\n' "$(date -Ins)" 'Total Elapse time' "$(timer.fmtElapsed "$delta")" | tee -a current/elapsed.times.txt
}

# -----------------------------------------------------------------------------------
function k8s.on_remote() {

    cat << "EOF"
#!/bin/bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.add_registries() {

    local host
    for host in "$@"; do
        cat << "REGISTRY"
       [plugins."io.containerd.grpc.v1.cri".registry.mirrors."${host}"]
         endpoint = ["http://${host}"]
REGISTRY
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.create_registry_defs() {

    local SNAP_DATA="${1:-/etc/containerd/config.toml}"
    local version="${2:-}"
    shift 2

    local configPath
    [ -d "${SNAP_DATA}/args" ] && configPath="${SNAP_DATA}/args/certs.d"
    [ -d "${configPath}" ] || return

    local host
    for host in "$@"; do
        local reg="http://${host}"
        reinit.run mkdir -p "${configPath}/$host"
        cat << REGISTRY > "${configPath}/${host}/hosts.toml"
server = "$reg"

[host."$reg"]
  capabilities = ["pull", "resolve"]
REGISTRY
        reinit.run chown -R root:microk8s "${configPath}/$host"
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.main() {

    local -r host="${1:?}"
    local -r version="${2:?}"
    local -r user="${3:?}"
    echo "## $(date -Ins) ${host} ###########################################################################"

    local inf="$(getent passwd "$USER")"
    [ "${inf:-}" ] || return 1

    local -r uid="$(cut -d ':' -f 3 <<< "$inf")"
    local -r gid="$(cut -d ':' -f 4 <<< "$inf")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"

    # create fresh dir for comfig
    [ -d "${homeDir}/.kube" ] && rm -rf "${homeDir}/.kube"
    sudo mkdir -p "${homeDir}/.kube"
    sudo chown -R "${uid}:${gid}" "${homeDir}/.kube"

    reinit.run snap install microk8s --channel "${version}/stable" --classic
    [ -z "$(which microk8s)" ] && die 'Failed to install microk8s'
    if [ "$K8S_CLUSTERNAME" = 'devk8s' ]; then
        echo 'Installing launch config'" for $K8S_CLUSTERNAME"
#        sudo mkdir -p /root/snap/microk8s/common ||:
#        sudo cp /home/bobb/GIT/k8s/devk8s.launch.yml /var/snap/microk8s/common/.microk8s.yaml
#        sudo cp /home/bobb/GIT/k8s/devk8s.launch.yml /root/snap/microk8s/common/microk8s-config.yaml
#        sudo snap set microk8s config="$(< /home/bobb/GIT/k8s/devk8s.launch.yml)"
    fi

    if [ -e "${SNAP}/credentials/client.config" ]; then
        reinit.run cp "${SNAP}/credentials/client.config" "$localConfig"
    else
        reinit.run microk8s config > "$localConfig"
    fi

    if [[ "$(pwd)" =~ '/home/bobb' ]]; then
        mkdir -p current ||:
        cp "$localConfig" "current/config.${K8S_CLUSTERNAME}.home"
    fi

    echo 'add user to microk8s group'
    reinit.run sudo usermod -a -G microk8s "$user"
    [ "$(which kubectl)" ] && sudo snap remove kubectl
    reinit.run sudo snap install kubectl --channel "${version}/stable" --classic


    echo 'update k8s config and registry settings'
    reinit.run microk8s stop
    echo 'add home to csr.conf.template'
    sed -i -e '/cluster.local/aDNS.6 = home' "${SNAP}/certs/csr.conf.template"

    if [ "${version/./}" -ge '123' ]; then
        echo "create_registry_defs for ${version}"
        #shellcheck disable=SC2046
        reinit.run reinit.create_registry_defs "$SNAP" "$version" $(reinit.registry_refs)
    else
        echo "add_registries for ${version}"
        #shellcheck disable=SC2046
        reinit.run reinit.add_registries "$version" $(reinit.registry_refs) >> "${SNAP}/args/containerd-template.toml"
    fi

    reinit.run microk8s start

#    reinit.run microk8s refresh-certs --certs ca.crt

    echo 'waiting for K8s to be ready'
    reinit.run microk8s status --wait-ready
    echo "## $(date -Ins) ${host} ##################################################################### END #"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.onexit() {

    [ "${DEBUG:-0}" -eq 0 ] && return 0

    declare now=$(timer.getTimestamp)
    declare -i elapsed=$((now - START))
    printf '%s Elapsed time: %s\n' "$(date -Ins)" "$(timer.fmtElapsed $elapsed)"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.registry_refs() {

    local registry="$(sed -E -e 's|^(.+):.*$|\1|' <<< "${REGISTRY}")"
    nslookup "${registry}" | awk '{if((NR==5 && match($1,"^Name")>0)||(NR != 2 && match($1,"^Address")>0)){print $2 ":5000"}}'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.remove_previous() {

    local -r host="${1:?}"
    echo "## $(date -Ins) ${host} ###########################################################################"

    microk8s.reset --destroy-storage ||:
    reinit.run snap remove microk8s
    [ -d ~/snap/microk8s ] && rm -rf ~/snap/microk8s
    [ -d /var/snap/microk8s ] && sudo rm -rf /var/snap/microk8s
    return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function reinit.run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
    # start new HEREDOC with substitution
    cat << EOF
#shellcheck disable=SC2034
SCRIPT="\$0"
SNAP="$SNAP"
START="\$(date +%s)"
DEBUG=0
#shellcheck disable=SC2034
TEMP=''
BASHLIB_DIR='/home/bobb/.bin/utilities/bashlib'
REGISTRY="$REGISTRY"
K8S_CLUSTERNAME="$K8S_CLUSTERNAME"

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=\$'\n\t'
#shellcheck disable=SC1090
source "\${BASHLIB_DIR}/trap.bashlib"
#shellcheck disable=SC1090
source "\${BASHLIB_DIR}/timer.bashlib"
trap reinit.onexit EXIT

[ "\$(which microk8s)" ] && reinit.remove_previous "\$(hostname)"
reinit.main "\$(hostname)" "$K8S_VERSION" "$USER"
EOF
}

# -----------------------------------------------------------------------------------
function k8s.parse_config() {

    local -r json="${1:?}"
    [ "$json" = 'null' ] && return 0

    local key val
    while read -r key; do
        val="$(jq --compact-output --monochrome-output '.'"$key" <<< "$json")"
        case "$(jq -r 'type' <<< "$val")" in
          string)
              eval export "$key"="$(jq -r '.' <<< "$val")"
              readonly "$key"
              ;;
          array)
              eval export "$key=( $(jq -r '.[]' <<< "$val") )"
              readonly "$key"
              ;;
          object)
#              eval "$key="$val"
              ;;
          *)
              echo "unrecognized type: $(jq -r 'type' <<< "$val")"
              ;;
        esac
    done < <(jq --compact-output --monochrome-output --raw-output '.|keys[]' <<< "$json")

    local cmdJson host
    host="$(hostname -f)"


    if [ "${host:-}" = "$DEV_MASTER" ]; then
        cmdJson="$(jq --compact-output --monochrome-output '.DEV' <<< "$json")"
        if [ "$cmdJson" ] && [ "$cmdJson" != 'null' ]; then
            k8s.parse_config "$cmdJson"
            [ "${VERSION:-}" = '' ] && VERSION="${DEV_VERSION}"
            if [ "${VERSION:-}" ]; then
                cmdJson="$(jq --compact-output --monochrome-output '.'"${VERSION}" <<< "$cmdJson")"
                [ "$cmdJson" ] && [ "$cmdJson" != 'null' ] && k8s.parse_config "$cmdJson"
            fi
        fi
    fi

    if [ "${host:-}" = "$PROD_MASTER" ]; then
        cmdJson="$(jq --compact-output --monochrome-output '.PROD' <<< "$json")"
        if [ "$cmdJson" ] && [ "$cmdJson" != 'null' ]; then
            k8s.parse_config "$cmdJson"
            [ "${VERSION:-}" = '' ] && VERSION="${PROD_VERSION}"
            if [ "${VERSION:-}" ]; then
                cmdJson="$(jq --compact-output --monochrome-output '.'"${VERSION}" <<< "$cmdJson")"
                [ "$cmdJson" ] && [ "$cmdJson" != 'null' ] && k8s.parse_config "$cmdJson"
            fi
        fi
    fi
}

# -----------------------------------------------------------------------------------
function k8s.prometheus_service_discovery() {

   local prometheus="$("$KUBECTL" get svc -n "$OBSERVABILITY" "$PROMETHEUS_SVC" -o json|jq '.spec|"http://\(.clusterIP):\(.ports[].port)"')"
   curl --silent --request GET "${prometheus}/api/v1/targets"
}

# -----------------------------------------------------------------------------------
function k8s.reinit_nodes() {

    # remove some of the content to ease the pressure created by reinstall
    k8s.remove_namespaces ||:
    k8s.remove_persistentvolumes ||:
    k8s.remove_modules    ||:

    [ -d current ] || mkdir current ||:
    SCRIPT=current/reinit.sh.node
    k8s.on_remote > "$SCRIPT"

    echo 'reinit each node'

    REMOTE='/tmp/reinit'
    function reinstall.remote() {

        local -r h="${1:?}"

        printf '%s starting %s\n' "$(date -Ins)" "$h"
        k8s.run scp "$SCRIPT" "$h:$REMOTE"
        # shellcheck disable=SC2029
        ssh "$h" "chmod 755 '$REMOTE'"
        # shellcheck disable=SC2029
        k8s.run ssh "$h" "sudo '$REMOTE'"
        k8s.log_elapsed "${h}"
        # shellcheck disable=SC2029
        ssh "$h" "[ -e '$REMOTE' ] && rm '$REMOTE'"
    }

    k8s.run_in_parallel 'reinstall.remote' 'log' "${K8S_NODES[@]}"
#    rm "$SCRIPT"
    DEBUG=1

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.reinstall_cluster() {

    [ -d current ] && rm -rf current
    mkdir current ||:
    :> current/elapsed.times.txt

    k8s.separator k8s.reinit_nodes
    [ -z "$(which microk8s)" ] && exit 1
    k8s.separator k8s.add_nodes_to_cluster
    k8s.separator k8s.update_kube_config
    k8s.separator k8s.enable_microk8s_modules
    k8s.separator k8s.customize_content
    k8s.separator k8s.add_new_content
#    k8s.separator k8s.install_krew
    k8s.separator k8s.generate_token
    k8s.separator k8s.capture_config
    k8s.separator k8s.update_jenkins
    k8s.separator k8s.capture_ips_for_gui
    k8s.separator k8s.capture_status
}

# -----------------------------------------------------------------------------------
function k8s.remove_app() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.create_secrets_for_apps "$dir"
        k8s.load_namespace "$dir" 'delete'
    done
}

# -----------------------------------------------------------------------------------
function k8s.reinstall_prometheus() {

    [ -z "$(which microk8s)" ] && return 0
    local ns=monitoring
    #shellcheck disable=SC2072
    [[ "${K8S_VERSION:-0}" > '1.24' ]] && ns='observability'

    k8s.load_namespace 'prometheus' 'delete'
    sleep 2
    microk8s disable prometheus
    sleep 2
    microk8s enable prometheus
    sleep 2
    k8s.run "$KUBECTL" patch deployment grafana -n "$ns" -p '{"spec":{"template":{"spec":{"containers":[{"name":"grafana","image":"s2.ubuntu.home:5000/docker.io/grafana/grafana:11.1.5"}]}}}}'
    k8s.run "$KUBECTL" patch service alertmanager-main -n "$ns" -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.run "$KUBECTL" patch service prometheus-k8s -n "$ns" -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.load_namespace 'prometheus'
    k8s.run "$KUBECTL" patch Prometheus/k8s -n "$ns" --patch-file=./production/Prometheus.k8s.yml --type='merge'
    k8s.capture_ips_for_gui
}

# -----------------------------------------------------------------------------------
function k8s.remove_content() {

    echo 'removing content'
    k8s.run "$KUBECTL" apply -f ./production/corends.ConfigMap.yml
    k8s.run "$KUBECTL" apply -f ./production/nginx-ingress.DaemonSet.yml

    k8s.load_namespace 'grafana' 'apply'
    k8s.load_namespace 'kubernetes-dashboard' 'apply'

    (k8s.load_namespace 'hubot' 'delete') ||:
    (k8s.load_namespace 'jenkins' 'delete') ||:
    (k8s.load_namespace 'kowl' 'delete') ||:
    (k8s.load_namespace 'recipes' 'delete') ||:
    (k8s.load_namespace 'smee' 'delete') ||:
    (k8s.load_namespace 'versions' 'delete') ||:

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.remove_modules() {

    [ -z "$(which microk8s)" ] && return 0
    echo 'removing modules to ease the pressure created by reinstall'
    local allowed=' ha-cluster '

    # get list of namespaces:
    local -a modules
    mapfile -t modules < <(microk8s status | awk 'BEGIN {show=0} {if ($1 == "disabled:") { show=0 } else if (show == 1) { print $1 } else if ($1 == "enabled:" ) {show=1}}')
    local module
    for module in "${modules[@]}"; do
        grep -qs " ${module} " <<< "$allowed" && continue
        k8s.run sudo microk8s disable "$module"
        sleep 3
    done
    echo
}

# -----------------------------------------------------------------------------------
function k8s.remove_namespaces() {

    [ -z "$(which microk8s)" ] && return 0

    echo 'removing namespaces to ease the pressure created by reinstall'
    local allowed=" kube-system kube-public kube-node-lease default ingress metallb-system ${OBSERVABILITY} "

    # get list of namespaces:
    local -a namespaces
    mapfile namespaces < <("$KUBECTL" get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

    local ns
    for ns in "${namespaces[@]}"; do
        grep -qs " ${ns} " <<< "$allowed" && continue
        k8s.run "$KUBECTL" delete namespace "$ns"
        sleep 2
    done
    echo
}

# -----------------------------------------------------------------------------------
function k8s.remove_persistentvolumes() {

    [ -z "$(which microk8s)" ] && return 0

    echo 'removing persistentVolumes to ease the pressure created by reinstall'

    # get list of PV's:
    local -a pvs
    mapfile pvs < <("$KUBECTL" get pv -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
    local pv
    for pv in "${pvs[@]}"; do
        k8s.run "$KUBECTL" delete pv "$pv"
    done
#    mapfile pvs < <("$KUBECTL" get pvc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
#    local pvc
#    for pvc in "${pvs[@]}"; do
#        k8s.run "$KUBECTL" delete pvc "$pv"
#    done
    echo
}

function k8s.restore_postgres() {

  local POSTGRES_NAMESPACE='postgres'
  local POSTGES_PVNAME='pv-hp-postgres'
  local PGADMIN_NAMESPACE='pgadmin4'
  local PGADMIN_PVNAME='pv-hp-pgadmin4'


  # verify KUBECTL exists
  if [ "${#KUBECTL}" -eq 0 ];then
    echo "kubectl: does not exist"
    exit
  fi

  local dbms_pod="$(k8s.verify_hostpath "$POSTGRES_NAMESPACE" "$POSTGES_PVNAME")"
  k8s.verify_dbms "$POSTGRES_NAMESPACE" "$dbms_pod"

  k8s.verify_hostpath "$PGADMIN_NAMESPACE" "$PGADMIN_PVNAME" '5050:5050'
}

# -----------------------------------------------------------------------------------
function k8s.run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}

# -----------------------------------------------------------------------------------
function k8s.run_in_parallel() {

    local script="${1:?}"
    local log_extn="${2:?}"
    shift 2
    mkdir -p current ||:

    echo "start $# copies of $script"
    for h in "$@"; do
      if [ "${log_extn}" = '.' ]; then
        ( k8s.run "$script" "$h" ) &
      else
        ( k8s.run "$script" "$h" ) &> "current/${h}.${log_extn}" &
      fi
    done

    echo '  wait for all jobs to complete'
    while [ "$(jobs -r -p)" ]; do
        wait
        jobs -nl
    done
    stty sane

    if [ "${log_extn}" != '.' ]; then
        echo '  output log of each job'
        for h in "$@"; do
            [ -e "current/${h}.${log_extn}" ] || continue
            echo
            while read -r line; do
              echo -e "  \e[93m$h:\e[0m  $line"
            done< "current/${h}.${log_extn}"
            sed -i -E -e "${k8s_NO_ASCII}" "current/${h}.${log_extn}"
        done
    fi
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.separator() {

    echo
    echo "~~~$(printf ' %-30s' "$1")~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo

    $1
}

# -----------------------------------------------------------------------------------
function k8s.server_ip() {

    local -r inf="$(getent passwd "$USER")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"

    python3 -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout)' < "$localConfig" | jq -r '.clusters[].cluster.server'
}

# -----------------------------------------------------------------------------------
function k8s.update_jenkins() {

    echo 'updating Jenkins security'

    # shellcheck disable=SC1090,SC2154
    JENKINS_CREDS="$(source "$__SECRETS_FILE" ; echo "$jenkins")"

    local -r tokenFile='current/tokens.inf'
    if [ -f "$tokenFile" ]; then
        local new_token="$(grep 'token:' "$tokenFile" | awk '{print $2}')"
        [ "${new_token:-}" ] && k8s.update_jenkins_config "$JENKINS_TOKEN_KEY" "$new_token"
    fi

    local -r config_file="current/config.${K8S_CLUSTERNAME}.home"
    if [ -f "$config_file" ]; then
        local new_token="$(grep 'token:' "$config_file" | awk '{print $2}')"
        [ "${new_token:-}" ] && k8s.update_jenkins_config "$JENKINS_ADMIN_KEY" "$new_token"
    fi

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.update_kube_config() {

    echo 'setting kubectl config'
    local -r HOST="$(hostname -f)"

    local -r inf="$(getent passwd "$USER")"
    local -r uid="$(cut -d ':' -f 3 <<< "$inf")"
    local -r gid="$(cut -d ':' -f 4 <<< "$inf")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"
    local -r config_file="current/config.${K8S_CLUSTERNAME}.home"

    sudo mkdir -p "${homeDir}/.kube" ||:
    sudo chown -f -R "${uid}:${gid}" "${homeDir}/.kube"

    local cfgFile ip
    cfgFile="${SNAP}/credentials/client.config"
    if [ -e "$cfgFile" ]; then
        k8s.run cp "$cfgFile" "$config_file"
    else
        k8s.run microk8s config > "$config_file"
    fi
    ip="$(ip -4 -j address|jq -r '.[]|select(.qdisc == "fq_codel").addr_info[0].local')"
    sed -i -e "s|https://127.0.0.1:16443|https://${ip}:16443|g" -e "s|microk8s|${K8S_CLUSTERNAME}|g" "$config_file"

    local -r src_config="$(readlink -f "$config_file")"
    function k8s.update_kube_config.update_host() {
        local -r h="${1:?}"
        echo "setting k8s config on $h"
        mkdir -p "${homeDir}/.kube"
        scp "${HOST}:$src_config" "${homeDir}/.kube/config"
        sudo chown -R "${uid}:${gid}" "${homeDir}/.kube"
        sudo usermod -a -G microk8s "$(getent passwd "$uid"|cut -d ':' -f 1)"
    }

    k8s.run_in_parallel 'k8s.update_kube_config.update_host' '.' "${K8S_NODES[@]}"

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.update_jenkins_config() {

    if [ -z "${JENKINS_CREDS:-}" ] || [ -z "${JENKINS_URL:-}" ]; then
        [ "${JENKINS_CREDS:-}" ] || printf '\x1b[31m**** ERROR: %s\x1b[0m\n' 'No credentials provided for Jenkins' >&2
        [ "${JENKINS_URL:-}" ] || printf '\x1b[31m**** ERROR: %s\x1b[0m\n' 'No URL provided for Jenkins' >&2
        exit 1
    fi

    local -r id="${1:?}"
    local -r newval="${2:?}"
    local -r configXml="$(mktemp)"

    local jenkins_crumb="$(curl --silent \
                                --insecure \
                                --user "$JENKINS_CREDS" \
                                --request GET \
                                "${JENKINS_URL}"'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')"
    curl --silent \
         --insecure \
         --header "$jenkins_crumb" \
         --request GET "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml" -o "$configXml"

    if [ "$(< "$configXml")" ]; then
        if grep -sq '<password>' "$configXml"; then
            echo "  updating password for $id"
            xmlstarlet edit --inplace --update '//password' --value "$newval" "$configXml"
            curl --silent \
                 --insecure \
                 --user "$JENKINS_CREDS" \
                 --header "$jenkins_crumb" \
                 --header content-type:application/xml \
                 --data "@${configXml}" \
                 --request POST \
                 "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml"

        elif grep -sq '<secret>' "$configXml"; then
            echo "  updating secret for $id"
            xmlstarlet edit --inplace --update '//secret' --value "$newval" "$configXml"
            curl --silent \
                 --insecure \
                 --user "$JENKINS_CREDS" \
                 --header "$jenkins_crumb" \
                 --header content-type:application/xml \
                 --data "@${configXml}" \
                 --request POST \
                 "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml"

        fi
        rm "$configXml"
    fi
}

# -----------------------------------------------------------------------------------
function k8s.verify_dbms() {

  local -r NAMESPACE="${1:?}"
  local -r POD="${2:?}"
  local -r INIT_MSG='LOG:  database system is ready to accept connections'

  # wait until postgres DB is ready for connections
  local lines=''
  local -i count=0
  while true; do
    lines="$("$KUBECTL" logs --namespace "$NAMESPACE" "$POD" | grep "$INIT_MSG")"
    [ "$(wc -l <<< "$lines")" -gt 0 ] && break
    if [ "$(( ++count ))" -gt "$MAX_ITER" ]; then
      echo "Unable to determine if Database is running"
      exit
    fi
    sleep 2
  done

  # load last backup into DBMS
  local sql_file="$(k8s.get_last_SQL_BACKUP)"
  "$KUBECTL" cp ~/"workspace/$sql_file" "${NAMESPACE}/${POD}:/tmp/$sql_file"
  {
    "$KUBECTL" exec -i -t --namespace  "$NAMESPACE" "$POD" -- psql -h 127.0.0.1 -U postgres -f "/tmp/$sql_file"
  } 2>&1 | tee restore_postgres.sql.log
  "$KUBECTL" exec -i -t --namespace  "$NAMESPACE" "$POD" -- rm "/tmp/$sql_file"
}

# -----------------------------------------------------------------------------------
function k8s.verify_hostpath() {

  local -r NAMESPACE="${1:?}"
  local -r PV_NAME="${2:?}"
  local -r PERMS="${3:-}"

  # verify NAMESPACE exists
  if [ "$("$KUBECTL" get namespace -o json | jq -r '[.items[]|select(.metadata.name == "'"$NAMESPACE"'" and .status.phase == "Active")]|length')" -eq 0 ];then
    echo "Namespace: ${NAMESPACE} does not exist"
    exit
  fi

  # verify host defined
  local -r host="$("$KUBECTL" get pods --namespace "$NAMESPACE" -o=jsonpath='{.items[0].status.hostIP}')"
  if [ "${#host}" -eq 0 ];then
    echo "Host: not defined"
    exit
  fi

  # verify directory defined
  local -r dir="$("$KUBECTL" get pv "$PV_NAME" -o=jsonpath='{.spec.hostPath.path}')"
  if [ "${#dir}" -eq 0 ];then
    echo "Dir: not defined"
    exit
  fi

  # verify pod defined
  local pod="$("$KUBECTL" get pods --namespace "$NAMESPACE" -o=jsonpath='{.items[0].metadata.name}')"
  if [ "${#pod}" -eq 0 ];then
    echo "Pod: not defined"
    exit
  fi

  # make sure DBMS has local directory
  #shellcheck disable=SC2029
  ssh "$host" "sudo rm -rf '$dir';mkdir -p '$dir' ||:"
  if [ "${#PERMS}" -gt 0 ]; then
    #shellcheck disable=SC2029
    ssh "$host" "sudo chown -R '$PERMS' '$dir'"
  else
    echo "$pod"
  fi

  # wait for pod to start
  local phase
  local -i count=0
  while true; do
    phase="$("$KUBECTL" get pods --namespace "$NAMESPACE" -o=jsonpath='{.items[0].status.phase}')"
    [ "$phase" = 'Running' ] && break
    if [ "$(( ++count ))" -gt "$MAX_ITER" ]; then
      echo "Unable to determine if pod: ${pod} is running"
      exit
    fi
    sleep 2
  done
}

# -----------------------------------------------------------------------------------
