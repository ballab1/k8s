#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#  functions for 'k8s.app'
#---------------------------------------------------------------------------------------------- 

function k8s.__init() {

    # shellcheck disable=SC2034
    START=$(date +%s)

    # Use the Unofficial Bash Strict Mode
    set -o errexit
    set -o nounset
    set -o pipefail
    IFS=$'\n\t'

    # declarations of MUST HAVE globals
    # shellcheck disable=SC2034
    PROGRAM_DIR="${PROGRAM_DIR:-~/GIT/k8s}"
    BASHLIB_DIR="${BASHLIB_DIR:-~/.bin/utilities/bashlib}"
    PROGRAM_NAME="$(basename "${BASH_SOURCE[0]}" | sed 's|.sh$||')"
    # shellcheck disable=SC2034
    LOGFILE="$(pwd)/${PROGRAM_NAME}.log"
    # shellcheck disable=SC2034
    JSONNET_IMAGE='s2.ubuntu.home:5000/thirdparty/jsonnet:0.18.0-debian-10-r84'

    # source other bashlibs

    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/trap.bashlib"
    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/timer.bashlib"
    trap k8s.onexit EXIT

    # shellcheck disable=SC2034
    VERSION=1.23
    DEBUG=1
    LASTTIME="$START"

    [ -z "${KUBECTL:-}" ] && KUBECTL="microk8s.kubectl"
    :> 'elapsed.times.txt'
}

# ----------------------------------------------------------------------------------- 

function k8s.add_new_content() {

    echo 'adding new content'
    k8s.load_namespace 'hubot'
    k8s.load_namespace 'jenkins'
    k8s.load_namespace 'kowl'
    k8s.load_namespace 'recipes'
    k8s.load_namespace 'smee'
    k8s.load_namespace 'versions'

    k8s.logElapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.add_nodes_to_cluster() {

    echo 'join nodes into cluster'
    local cmd
    for h in {6..8}; do
        cmd="$(sudo microk8s add-node | grep '10.3.1.14' | head -1)"
        echo "ssh s$h '$cmd'"
        k8s.run ssh "s$h" "sudo $cmd"
        k8s.run ssh "s$h" "microk8s status --wait-ready"
    done
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.capture_config() {

    echo 'capturing config content'
    microk8s config > kube.config
    cp kube.config /home/bobb/.kube/config
    "$KUBECTL" api-versions ||: > ./api-api-versions.txt
    "$KUBECTL" api-resources -o wide ||: > ./api-resources.txt
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.capture_ips_for_gui() {

    echo 'capturing IPs for GUI'
    "$KUBECTL" get services -A -o json |  jq '[.items[]|select(.spec.clusterIP != "None")|{"title":.metadata.name, "host": .spec.clusterIP, "port":.spec.ports[0].port}]' > services_ips.json
    scp services_ips.json s3:production/workspace.production/www/
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.capture_status() {

    echo 'capturing status'
    sudo snap alias microk8s-kubectl kubectl
    k8s.run "$KUBECTL" cluster-info
    k8s.run "$KUBECTL" get nodes
    k8s.run "$KUBECTL" get all -A

#    k8s.dump_apis

    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.createApp() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.load_namespace "$dir"
    done
} 

# -----------------------------------------------------------------------------------
function k8s.createSecretsForApp() {

    local -r target="${1:?}"
    local -r certs="${2:-certs}"

    [[ -e "$certs" && -e "$certs" ]] || return 0
    local name    
    while read -r file; do
        name="$(echo "${target,,}${file//$certs/}" | sed -e 's|[/\.]|-|g')"
        "$KUBECTL" create secret generic "$name" --dry-run=client --from-file="$file" -o yaml > "${target}/02.Secret.${name}.yaml"
    done < <(find "$certs" -mindepth 1 -maxdepth 1 -type f)
}

# -----------------------------------------------------------------------------------
function k8s.customize_content() {

    echo 'customizing content'
    k8s.run "$KUBECTL" apply -f ./production/corends.ConfigMap.yml
    k8s.run "$KUBECTL" apply -f ./production/nginx-ingress.DaemonSet.yml

    k8s.run "$KUBECTL" patch service kibana-logging -n kube-system -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.run "$KUBECTL" patch service kubernetes-dashboard -n kube-system -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.run "$KUBECTL" patch deployment kubernetes-dashboard -n kube-system -p '{"spec":{"template":{"spec":{"containers":[{"name":"kubernetes-dashboard","image":"kubernetesui/dashboard:v2.5.0"}]}}}}'

    k8s.run "$KUBECTL" patch deployment grafana -n monitoring -p '{"spec":{"template":{"spec":{"containers":[{"name":"grafana","image":"s2.ubuntu.home:5000/thirdparty/grafana:8.4.5"}]}}}}'
#    k8s.run "$KUBECTL" patch deployment grafana -n monitoring -p '{"spec":{"template":{"spec":{"containers":[{"name":"grafana","image":"grafana/grafana:7.5.4"}]}}}}'
    k8s.run "$KUBECTL" patch service grafana -n monitoring -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.run "$KUBECTL" patch service alertmanager-main -n monitoring -p '{"spec":{"type":"LoadBalancer"}}'
    k8s.run "$KUBECTL" patch service prometheus-k8s -n monitoring -p '{"spec":{"type":"LoadBalancer"}}'

    k8s.load_namespace 'microk8s'
    k8s.load_namespace 'prometheus'
    "$KUBECTL" patch Prometheus/k8s -n monitoring --patch-file=./production/Prometheus.k8s.yml --type='merge'

#    k8s.run "$KUBECTL" create -f ./production/local-hd.StorageClass.yml
#    k8s.run "$KUBECTL" create -f ./production/s5-local.PersistentVolume.yml
#    k8s.run "$KUBECTL" create -f ./production/s6-local.PersistentVolume.yml
#    k8s.run "$KUBECTL" create -f ./production/s7-local.PersistentVolume.yml
#    k8s.run "$KUBECTL" create -f ./production/s8-local.PersistentVolume.yml
#    k8s.run "$KUBECTL" create -f ./production/my-claim.persistentVolumeClaim.yml

    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.dump_apis() {

   local -r dir_org="${1:-by_api}"

    local mode object
    local -a modes=('wide' 'json' 'yaml')

    mkdir -p apis
    rm -rf apis/*

    if [ "$dir_org" != 'by_api' ]; then
        for mode in "${modes[@]}"; do
            mkdir -p "apis/$mode"
        done
    fi
    while read -r object; do
        echo "  $object"
        [ "$dir_org" = 'by_api' ] && mkdir -p "apis/${object}"
        for mode in "${modes[@]}"; do
            declare ext="$mode"
            [ "$mode" = 'wide' ] && ext='txt'
            if [ "$dir_org" = 'by_api' ]; then
                "$KUBECTL" get "$object" -A -o "$mode" &> "apis/${object}/${mode}.$ext" ||:
            else
                "$KUBECTL" get "$object" -A -o "$mode" &> "apis/${mode}/${object}.$ext" ||:
            fi
        done
    done < <("$KUBECTL" api-resources --no-headers=false -o=name --sort-by=name)

    "$KUBECTL" api-resources --sort-by=name --output wide > apis/api-resourses.txt

    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.enable_microk8s_modules() {

   local modules=('dashboard' 'dashboard-ingress' 'dns' 'fluentd' 'ingress' 'metallb:192.168.0.1-192.168.0.100' 'metrics-server' 'prometheus' 'storage' 'helm3' 'rbac')

    echo 'enable microk8s modules'
    for module in "${modules[@]}"; do
        k8s.run sudo microk8s enable "$module" ||:
    done
    k8s.run microk8s status --wait-ready
    k8s.run sudo iptables -P FORWARD ACCEPT
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.generate_token() {

    echo 'generating tokens.inf'
    declare token_file='tokens.inf'
    :> "$token_file"
    for token in default-token admin-user ; do
        declare ref="$("$KUBECTL" -n kube-system get secret | grep "$token" | awk '{print $1}')"
        [ -z "${ref:-}" ] && continue
        k8s.run "$KUBECTL" -n kube-system describe secret "$ref" | tee -a "$token_file"
        break
    done
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.installApp() {

    [ "$#" -eq 0 ] && return 0

    k8s.removeApp "$@"
    k8s.createApp "$@"
    "$KUBECTL" get all
} 

# -----------------------------------------------------------------------------------
function k8s.jsonnet() {

    [ "$#" -eq 0 ] && return 0
    export JSONNET_PATH="${JSONNET_PATH:-}:https://raw.eos2git.cec.lab.emc.com/TechOps/k8s-libsonnet/upstream-main/1.20/"
    local text="$(docker run --rm --tty --volume "$(pwd):$(pwd)" --workdir "$(pwd)" "$JSONNET_IMAGE" "$@")" ||:
    echo "$text"
}

# -----------------------------------------------------------------------------------
function k8s.load_namespace() {

    local -r dir="${1:?}"
    local -r verb="${2:-create}"

    local direction=''
    [ "$verb" = 'delete' ] && direction='-r'
    
    local file status
    while read -r file; do
        ("$KUBECTL" "$verb" -f "${file}") && status=$? || status=$?
        [ "$verb" = 'delete' ] && continue
        [ "${status:-0}" -ne 0 ] && exit
    done < <(find "production/${dir}" -type f | LC_ALL=C sort -n $direction)
    echo
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.logElapsed() {

    [ "${DEBUG:-0}" -ne 0 ] || return

    local -r text="${1:-}"
    local current=$(timer.getTimestamp)

    {
        printf '%s %s %s\n' "$(date -Ins)" "$text" "$(timer.fmtElapsed "$((current - LASTTIME))")"
        echo
    } | tee -a elapsed.times.txt
    LASTTIME="$current"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.onexit() {

    find /tmp -maxdepth 1 -mindepth 1 -type f \( -name 'ssh.s?.txt' -or -name 'tmp*' \) -delete
    if [ "${SCRIPT:-}" ]; then
        for h in s{5..8}.ubuntu.home; do
            ssh "$h" "[ -e '$SCRIPT' ] && rm '$SCRIPT'"
        done
    fi

    local -i delta="$(timer.getTimestamp)"
    delta="$(( delta - START ))"
    [ "$delta" -lt 3 ] || printf '%s %s %s\n\n' "$(date -Ins)" 'Total Elapse time' "$(timer.fmtElapsed "$delta")" | tee -a elapsed.times.txt
}

# -----------------------------------------------------------------------------------
function k8s.onRemote() {
    cat << "EOF"
#!/bin/bash
function add_registries() {

    cat << "REGISTRY"
       [plugins."io.containerd.grpc.v1.cri".registry.mirrors."s2.ubuntu.home:5000"]
         endpoint = ["http://s2.ubuntu.home:5000"]
       [plugins."io.containerd.grpc.v1.cri".registry.mirrors."10.3.1.12:5000"]
        endpoint = ["http://10.3.1.12:5000"] 
REGISTRY
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function create_registry_defs() {

    local SNAP_DATA="${1:-/etc/containerd/config.toml}"
    local version="${2:-}"
    local config_path="${SNAP_DATA}/args/certs.d"

    for reg in "http://s2.ubuntu.home:5000" "http://10.3.1.12:5000"; do
        local host="${reg#*//}"
        run mkdir -p "${config_path}/$host"
        cat << REGISTRY > "${config_path}/${host}/hosts.toml"
server = "$reg"

[host."$reg"]
  capabilities = ["pull", "resolve"]
REGISTRY
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function main() {

    START=$(date +%s)
    DEBUG=1
    BASHLIB_DIR='/home/bobb/.bin/utilities/bashlib'

    local host="${1:?}"
    local version="${2:?}"
    echo "## $(date -Ins) ${host} ###########################################################################"

    # Use the Unofficial Bash Strict Mode
    set -o errexit
    set -o nounset
    set -o pipefail
    IFS=$'\n\t'
    source "${BASHLIB_DIR}/trap.bashlib"
    source "${BASHLIB_DIR}/timer.bashlib"
    trap onexit EXIT

    run snap remove microk8s
    run snap install microk8s --channel "${version}/stable" --classic

    run microk8s stop
    local SNAP='/var/snap/microk8s/current'
    echo 'add home to csr.conf.template'
    sed -i -e '/cluster.local/aDNS.6 = home' "${SNAP}/certs/csr.conf.template"

    if [ "$version" = '1.23' ]; then
        echo "create_registry_defs for ${version}"
        run create_registry_defs "$SNAP" "${version}"
    else
        echo "add_registries for ${version}"
        run add_registries "${version}" >> "${SNAP}/args/containerd-template.toml"
    fi
    run microk8s start
    run microk8s refresh-certs
    echo 'waiting for K8s to be ready'
    run microk8s status --wait-ready
    echo "## $(date -Ins) ${host} ##################################################################### END #"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function onexit() {

    [ "${DEBUG:-0}" -ne 0 ] || return

    local current=$(timer.getTimestamp)
    local -i elapsed=$((current - START)) 
    printf '%s Elapsed time: %s\n' "$(date -Ins)" "$(timer.fmtElapsed $elapsed)" 
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
    # start new HEREDOC with substitution
    cat << EOF
SCRIPT="\$0"
main "\$(hostname)" "$VERSION"
EOF
}

# -----------------------------------------------------------------------------------
function k8s.removeApp() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.createSecretsForApp "$dir"
        k8s.load_namespace "$dir" 'delete'
    done
}

# -----------------------------------------------------------------------------------
function k8s.reinit_nodes() {

    SCRIPT="$(mktemp)"
    k8s.onRemote > "$SCRIPT"

    echo 'reinit each node'

    local -r script='/tmp/reinit'
    function reinitstall.remote() {

        local -r h="${1:?}"
        local -r script="${1:?}"

        printf '%s starting %s\n' "$(date -Ins)" "$h"
        k8s.run scp "$SCRIPT" "$h:$script"
        ssh "$h" "chmod 755 $script"
        k8s.run ssh "$h" "sudo '$script'"
        k8s.logElapsed "${h}"
        ssh "$h" "[ -e '$script' ] && rm '$script'"
    }

    k8s.runInParallel 'reinitstall.remote' 's5.ubuntu.home' 's6.ubuntu.home' 's7.ubuntu.home' 's8.ubuntu.home'
    rm "$SCRIPT"

    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.remove_content() {

    echo 'removing content'
    k8s.run "$KUBECTL" apply -f ./production/corends.ConfigMap.yml
    k8s.run "$KUBECTL" apply -f ./production/nginx-ingress.DaemonSet.yml

    k8s.load_namespace 'grafana' 'apply'
    k8s.load_namespace 'kubernetes-dashboard' 'apply'

    (k8s.load_namespace 'hubot' 'delete') ||:
    (k8s.load_namespace 'jenkins' 'delete') ||:
    (k8s.load_namespace 'kowl' 'delete') ||:
    (k8s.load_namespace 'recipes' 'delete') ||:
    (k8s.load_namespace 'smee' 'delete') ||:
    (k8s.load_namespace 'versions' 'delete') ||:

    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}

# -----------------------------------------------------------------------------------
function k8s.runInParallel() {

    local script="${1:?}"
    shift

    echo "start $# copies of $script"
    for h in "$@"; do
      ( k8s.run ssh "$h" "$script" ) &> "/tmp/$h.log" &
    done

    echo '  wait for all jobs to complete'
    while [ "$(jobs)" ]; do
        wait
    done

    echo '  output log of each job'
    for h in "$@"; do
        [ -e "/tmp/$h.log" ] || continue
        cat "/tmp/$h.log"
        rm "/tmp/$h.log"
    done
    k8s.logElapsed "${FUNCNAME[0]}"
    return 0
}

# -----------------------------------------------------------------------------------
