#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#  functions for 'k8s.app'
#----------------------------------------------------------------------------------------------

function k8s.__init() {

    # shellcheck disable=SC2034
    START=$(date +%s)

    # Use the Unofficial Bash Strict Mode
    set -o errexit
    set -o nounset
    set -o pipefail
    IFS=$'\n\t'

    # declarations of MUST HAVE globals
    # shellcheck disable=SC2034
    [ "${PROGRAM_DIR:-}" ] || PROGRAM_DIR=-~/GIT/k8s
    [ "${BASHLIB_DIR:-}" ] || BASHLIB_DIR=~/.bin/utilities/bashlib
    # shellcheck disable=SC2034
    [ "${PROGRAM_NAME:-}" ] || PROGRAM_NAME="$(basename "${BASH_SOURCE[0]}" | sed 's|.sh$||')"

    # source other bashlibs
    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/trap.bashlib"
    # shellcheck disable=SC1090
    source "${BASHLIB_DIR}/timer.bashlib"
    trap k8s.onexit EXIT


    # import our setup configuration
    local configYaml="$(pwd)/k8s.bashlib.yml"
    [ -f "$configYaml" ] || configYaml="$(pwd)/k8s.bashlib.yaml"
    [ -f "$configYaml" ] || configYaml="${PROGRAM_DIR}/k8s.bashlib.yml"
    [ -f "$configYaml" ] || configYaml="${PROGRAM_DIR}/k8s.bashlib.yaml"
    k8s.parse_config "$(python3 -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout)' < "$configYaml")"
    if [ -z "${K8S_VERSION:-}" ]; then
        echo "invalid configuration file $configYaml"
        exit
    fi

    # shellcheck disable=SC2034
    DEBUG=0
    LASTTIME="$START"
    sudo usermod -a -G microk8s "$USER"


    [ -z "${KUBECTL:-}" ] && KUBECTL="microk8s.kubectl"
}

# -----------------------------------------------------------------------------------
function k8s.add_new_content() {

    echo 'adding new content'
    for app in "${K8S_APPS[@]}"; do
        k8s.run "$KUBECTL" create -f "apps/${app}/" ||:
        sleep 30  # wait for initialization to complete
    done

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.add_nodes_to_cluster() {

    echo 'join nodes into cluster'
    local cmd ip node

    # get our local ip4 address
    ip="$(ip -4 -j address show scope global dynamic|jq -r '.[0].addr_info[].local')"

    # add nodes to cluster
    for node in "${K8S_NODES[@]}"; do
        [ "$node" = "$(hostname -f)" ] && continue
        [ -z "$(ssh "$node" 'which microk8s')" ] && continue
        cmd="$(sudo microk8s add-node | grep "$ip" | head -1)"
        [ -z "$cmd" ] && continue
        echo "ssh $node '$cmd'"
        k8s.run ssh "$node" "$cmd"
        k8s.run ssh "$node" "microk8s status --wait-ready"
    done

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_config() {

    echo 'capturing config content'
    mkdir -p current
    "$KUBECTL" api-versions ||: > ./current/api-api-versions.txt
    "$KUBECTL" api-resources -o wide ||: > ./current/api-resources.txt

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_ips_for_gui() {

   local ipFile='current/services_ips.json'

    echo 'capturing IPs for GUI'
    mkdir -p "$(pwd)/current" ||:
    "$KUBECTL" get services -A -o json |  jq '[.items[]|select(.spec.clusterIP != "None")|{"title":.metadata.name, "host": .spec.clusterIP, "port":.spec.ports[0].port}]' > "$ipFile"
    scp "$ipFile" s3:production/workspace.production/www/
#    cp "$ipFile" /mnt/k8s/web/

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.capture_status() {

    echo 'capturing status'
    k8s.run "$KUBECTL" cluster-info
    k8s.run "$KUBECTL" get nodes
    k8s.run "$KUBECTL" get all -A

#    k8s.dump_apis

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.create_app() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.load_namespace "$dir"
    done
}

# -----------------------------------------------------------------------------------
function k8s.create_secrets_for_apps() {

    local -r target="${1:?}"
    local -r certs="${2:-certs}"

    [[ -e "$certs" && -e "$certs" ]] || return 0
    local name
    while read -r file; do
        name="$(echo "${target,,}${file//$certs/}" | sed -e 's|[/\.]|-|g')"
        "$KUBECTL" create secret generic "$name" --dry-run=client --from-file="$file" -o yaml > "${target}/02.Secret.${name}.yaml"
    done < <(find "$certs" -mindepth 1 -maxdepth 1 -type f)
}

# -----------------------------------------------------------------------------------
function k8s.customize_content() {

    echo 'customizing content'
    local -r names="$("$KUBECTL" get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
    local ns object status
    while read -r patchFile;do
        # extract namespace from patchFile name
        ns="$(basename "${patchFile}")"
        ns="${ns%%.*}"
        grep -qE "^${ns}\$" <<< "$names" || continue

        # extract obect from patchFile name
        object="$(basename "${patchFile%.*}")"
        object="${object#*.}"
        object="${object//.//}"
        [ "${object:-}" = 'daemonset' ] && object='daemonset.app'

        if ("$KUBECTL" get -n "$ns" "$object"); then
            # patch object
            k8s.run "$KUBECTL" patch "$object" -n "$ns" --patch-file=<(envsubst < "$patchFile") --type='merge' && status=$? || status=$?
            if [ "$status" -ne 0 ]; then
                printf '\x1b[31m**** ERROR: %s\x1b[0m\n' "$patchFile" >&2
                envsubst < "$patchFile"
            fi
        fi
    done < <(find "production/patches.${K8S_VERSION}" -mindepth 1 -maxdepth 1 -type f -name '*.yaml')

    # update default apps
    k8s.run "$KUBECTL" create -f "production/microk8s.${K8S_VERSION}/" ||:
    sleep 30  # wait for initialization to complete

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.dump_apis() {

   local -r dirOrg="${1:-by_api}"

    local mode object
    local -a modes=('wide' 'json' 'yaml')

    mkdir -p apis
    rm -rf apis/*

    if [ "$dirOrg" != 'by_api' ]; then
        for mode in "${modes[@]}"; do
            mkdir -p "apis/$mode"
        done
    fi
    while read -r object; do
        echo "  $object"
        [ "$dirOrg" = 'by_api' ] && mkdir -p "current/apis/${object}"
        for mode in "${modes[@]}"; do
            declare ext="$mode"
            [ "$mode" = 'wide' ] && ext='txt'
            if [ "$dirOrg" = 'by_api' ]; then
                "$KUBECTL" get "$object" -A -o "$mode" &> "current/apis/${object}/${mode}.$ext" ||:
            else
                "$KUBECTL" get "$object" -A -o "$mode" &> "current/apis/${mode}/${object}.$ext" ||:
            fi
        done
    done < <("$KUBECTL" api-resources --no-headers=false -o=name --sort-by=name)

    "$KUBECTL" api-resources --sort-by=name --output wide > current/apis/api-resourses.txt

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.enable_microk8s_modules() {

    echo 'enable microk8s modules'

    for module in "${K8S_MODULES[@]}";do
        k8s.run sudo microk8s enable "$module" ||:
    done

    k8s.run microk8s status --wait-ready
    k8s.run sudo iptables --flush
    k8s.run sudo iptables -P FORWARD ACCEPT

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.generate_token() {

    echo 'generating tokens.inf'
    mkdir -p current
    local tokenFile='./current/tokens.inf'
    :> "$tokenFile"
    for token in 'default-token' 'admin-user' ; do
        local ref="$("$KUBECTL" -n kube-system get secret | grep "$token" ||:)"
        [ "${ref:-}" ] && ref="$(awk '{print $1}' <<< "$ref")"
        # shellcheck disable=SC2181
        [[ "$?" != 0 || -z "${ref:-}" ]] && continue
        local result="$(k8s.run "$KUBECTL" -n kube-system describe secret "$ref" ||:)"
        [ -z "${result:-}" ] && continue
        echo "$result" > "$tokenFile"
        break
    done

    # do token file found, create one
    if [ -z "$(< "$tokenFile")" ] && [ "${FUNCNAME[1]}" != "${FUNCNAME[0]}" ]; then
        "$KUBECTL" apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: default-token
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token
EOF
        sleep 3
        k8s.generate_token
    fi
    [ "$(< "$tokenFile")" ] || (rm "$tokenFile" ||:)

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.install_app() {

    [ "$#" -eq 0 ] && return 0

    k8s.remove_app "$@"
    k8s.create_app "$@"
    "$KUBECTL" get all
}

# -----------------------------------------------------------------------------------
function k8s.install_krew() {

#    set -x
    TEMP="$(mktemp -d)"
    cd "$TEMP"
    OS="$(uname | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"
    KREW="krew-${OS}_${ARCH}"
    curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz"
    tar zxvf "${KREW}.tar.gz"
    "./$KREW" install krew ||:
    return 0
}

# -----------------------------------------------------------------------------------
# shellcheck disable=SC2120
function k8s.journalctl() {

    [ -z "$(which microk8s)" ] && return 0

    # shellcheck disable=SC2034
    for i in {1..4}; do
        [ "$(microk8s status)" == 'microk8s is not running. Use microk8s inspect for a deeper inspection.' ] || return 0
    done

    local -r identifier="${1:-microk8s.daemon-kubelite}"
    local -r start="${2:-$START}"
    local -r end="${3:-$(date +'%s')}"

    echo
    echo
    # shellcheck disable=SC2086
    echo "journalctl --reverse --output=verbose --identifier='${identifier}' --since $(date +'%Y-%m-%d %H:%M:%S' --date=@${start}) --until $(date +'%Y-%m-%d %H:%M:%S' --date=@${end})"
#    journalctl --reverse --output=verbose --identifier="${identifier}" --since "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${start}")" --until "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${end}")"
    journalctl --reverse --output=verbose --since "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${start}")" --until "$(date +'%Y-%m-%d %H:%M:%S' --date=@"${end}")"
    exit 1
}

# -----------------------------------------------------------------------------------
function k8s.jsonnet() {

    [ "$#" -eq 0 ] && return 0
    export JSONNET_PATH="${JSONNET_PATH:-}:https://raw.eos2git.cec.lab.emc.com/TechOps/k8s-libsonnet/upstream-main/1.20/"
    local text="$(docker run --rm --tty --volume "$(pwd):$(pwd)" --workdir "$(pwd)" "$JSONNET_IMAGE" "$@")" ||:
    echo "$text"
}

# -----------------------------------------------------------------------------------
function k8s.load_namespace() {

    local -r dir="${1:?}"
    local -r verb="${2:-create}"

    local direction=''
    [ "$verb" = 'delete' ] && direction='-r'

    local file status
    while read -r file; do
        ("$KUBECTL" "$verb" -f "${file}") && status=$? || status=$?
        [ "$verb" = 'delete' ] && continue
        [ "${status:-0}" -ne 0 ] && exit
    done < <(find "production/${dir}" -type f | LC_ALL=C sort -n $direction)
    echo
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.log_elapsed() {

    [ "${DEBUG:-0}" -eq 0 ] && return 0
    k8s.journalctl

    local -r text="${1:-}"
    local current=$(timer.getTimestamp)

    printf '\n%s %s %s\n\n' "$(date -Ins)" "$text" "$(timer.fmtElapsed "$((current - LASTTIME))")" | tee -a elapsed.times.txt

    LASTTIME="$current"
    stty sane
    return 0
}

# -----------------------------------------------------------------------------------
function k8s.onexit() {

    find /tmp -maxdepth 1 -mindepth 1 -type f \( -name 'ssh.s?.txt' -or -name 'tmp*' \) -delete
    if [ "${REMOTE:-}" ]; then
        declare node
        for node in "${K8S_NODES[@]}"; do
            # shellcheck disable=SC2029
            ssh "$node" "[ -e '${REMOTE:-}' ] && rm '${REMOTE:-}' ||:"
        done
    fi
    [ -f "${SCRIPT:-}" ] && rm "${SCRIPT}"

    [ "${TEMP:-}" ] && [[ "${TEMP:-}" =~ /tmp/* ]] && [ -d "$TEMP" ] && rm -rf "$TEMP"

    declare -i delta="$(timer.getTimestamp)"
    delta="$(( delta - START ))"
    [ "$delta" -lt 3 ] || printf '\n\n%s %s %s\n\n' "$(date -Ins)" 'Total Elapse time' "$(timer.fmtElapsed "$delta")" | tee -a elapsed.times.txt
}

# -----------------------------------------------------------------------------------
function k8s.on_remote() {

    cat << "EOF"
#!/bin/bash
function add_registries() {

    local host
    for host in "$@"; do
        cat << "REGISTRY"
       [plugins."io.containerd.grpc.v1.cri".registry.mirrors."${host}"]
         endpoint = ["http://${host}"]
REGISTRY
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function create_registry_defs() {

    local SNAP_DATA="${1:-/etc/containerd/config.toml}"
    local version="${2:-}"
    local configPath="${SNAP_DATA}/args/certs.d"
    shift 2

    local host
    for host in "$@"; do
        local reg="http://${host}"
        run mkdir -p "${configPath}/$host"
        cat << REGISTRY > "${configPath}/${host}/hosts.toml"
server = "$reg"

[host."$reg"]
  capabilities = ["pull", "resolve"]
REGISTRY
        run chown -R root:microk8s "${configPath}/$host"
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function main() {

    local -r host="${1:?}"
    local -r version="${2:?}"
    local -r user="${3:?}"
    echo "## $(date -Ins) ${host} ###########################################################################"

    local inf="$(getent passwd "$USER")"
    [ "${inf:-}" ] || return 1

    local -r uid="$(cut -d ':' -f 3 <<< "$inf")"
    local -r gid="$(cut -d ':' -f 4 <<< "$inf")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"

    # create fresh dir for comfig
    [ -d "${homeDir}/.kube" ] && rm -rf "${homeDir}/.kube"
    sudo mkdir -p "${homeDir}/.kube"
    sudo chown -R "${uid}:${gid}" "${homeDir}/.kube"

    run snap install microk8s --channel "${version}/stable" --classic
    [ -z "$(which microk8s)" ] && die 'Failed to install microk8s'

    if [ -e "${SNAP}/credentials/client.config" ]; then
        run cp "${SNAP}/credentials/client.config" "$localConfig"
    else
        run microk8s config > "$localConfig"
    fi

    if [[ "$(pwd)" =~ '/home/bobb' ]]; then
        mkdir -p "$(pwd)/current" ||:
        local -r CONFIG_FILE="$(pwd)/current/config.home"
        [ -e "$CONFIG_FILE" ] && cp "$localConfig" "$CONFIG_FILE"
    fi

    echo 'add user to microk8s group'
    run sudo usermod -a -G microk8s "$user"
    sudo snap alias microk8s.kubectl kubectl


    echo 'update k8s config and registry settings'
    run microk8s stop
    echo 'add home to csr.conf.template'
    sed -i -e '/cluster.local/aDNS.6 = home' "${SNAP}/certs/csr.conf.template"

    if [ "${version/./}" -ge '123' ]; then
        echo "create_registry_defs for ${version}"
        run create_registry_defs "$SNAP" "$version" $(registry_refs)
    else
        echo "add_registries for ${version}"
        run add_registries "$version" $(registry_refs) >> "${SNAP}/args/containerd-template.toml"
    fi

    run microk8s start

#    run microk8s refresh-certs --certs ca.crt

    echo 'waiting for K8s to be ready'
    run microk8s status --wait-ready
    echo "## $(date -Ins) ${host} ##################################################################### END #"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function onexit() {

    [ "${DEBUG:-0}" -eq 0 ] && return 0

    declare current=$(timer.getTimestamp)
    declare -i elapsed=$((current - START))
    printf '%s Elapsed time: %s\n' "$(date -Ins)" "$(timer.fmtElapsed $elapsed)"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function registry_refs() {

    local registry="$(sed -E -e 's|^(.+):.*$|\1|' <<< "${REGISTRY}")"
    nslookup "${registry}" | awk '{if((NR==5 && match($1,"^Name")>0)||(NR != 2 && match($1,"^Address")>0)){print $2 ":5000"}}'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function remove_previous() {

    local -r host="${1:?}"
    echo "## $(date -Ins) ${host} ###########################################################################"

    microk8s.reset --destroy-storage ||:
    run snap remove microk8s
    [ -d ~/snap/microk8s ] && rm -rf ~/snap/microk8s
    [ -d /var/snap/microk8s ] && sudo rm -rf /var/snap/microk8s
    return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
    # start new HEREDOC with substitution
    cat << EOF
SCRIPT="\$0"
SNAP="$SNAP"
START="\$(date +%s)"
DEBUG=0
TEMP=''
BASHLIB_DIR='/home/bobb/.bin/utilities/bashlib'
REGISTRY="$REGISTRY"

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=\$'\n\t'
source "\${BASHLIB_DIR}/trap.bashlib"
source "\${BASHLIB_DIR}/timer.bashlib"
trap onexit EXIT

[ "\$(which microk8s)" ] && remove_previous "\$(hostname)"
main "\$(hostname)" "$K8S_VERSION" "$USER"
EOF
}

# -----------------------------------------------------------------------------------
function k8s.parse_config() {

    local -r json="${1:?}"
    [ "$json" = 'null' ] && return 0

    local key val
    while read -r key; do
        val="$(jq --compact-output --monochrome-output '.'"$key" <<< "$json")"
        case "$(jq -r 'type' <<< "$val")" in
          string)
              eval export "$key"="$(jq -r '.' <<< "$val")"
              readonly "$key"
              ;;
          array)
              eval export "$key=( $(jq -r '.[]' <<< "$val") )"
              readonly "$key"
              ;;
          object)
#              eval "$key="$val"
              ;;
          *)
              echo "unrecognized type: $(jq -r 'type' <<< "$val")"
              ;;
        esac
    done < <(jq --compact-output --monochrome-output --raw-output '.|keys[]' <<< "$json")

    local cmdJson host
    host="$(hostname -f)"

    if [ "${host:-}" = "$DEV_MASTER" ]; then
        cmdJson="$(jq --compact-output --monochrome-output '.DEV' <<< "$json")"
        if [ "$cmdJson" ] && [ "$cmdJson" != 'null' ]; then
            k8s.parse_config "$cmdJson"
            if [ "${VERSION:-}" ]; then
                cmdJson="$(jq --compact-output --monochrome-output '.'"${VERSION}" <<< "$cmdJson")"
                [ "$cmdJson" ] && [ "$cmdJson" != 'null' ] && k8s.parse_config "$cmdJson"
            fi
        fi
    fi

    if [ "${host:-}" = "$PROD_MASTER" ]; then
        cmdJson="$(jq --compact-output --monochrome-output '.PROD' <<< "$json")"
        if [ "$cmdJson" ] && [ "$cmdJson" != 'null' ]; then
            k8s.parse_config "$cmdJson"
            if [ "${VERSION:-}" ]; then
                cmdJson="$(jq --compact-output --monochrome-output '.'"${VERSION}" <<< "$cmdJson")"
                [ "$cmdJson" ] && [ "$cmdJson" != 'null' ] && k8s.parse_config "$cmdJson"
            fi
        fi
    fi

}

# -----------------------------------------------------------------------------------
function k8s.prometheus_service_discovery() {

   local prometheus="$("$KUBECTL" get svc -n monitoring prometheus-k8s -o json|jq '.spec|"http://\(.clusterIP):\(.ports[].port)"')"
   curl -s "${prometheus}/api/v1/targets"
}

# -----------------------------------------------------------------------------------
function k8s.reinit_nodes() {

    # remove some of the content to ease the pressure created by reinstall
    k8s.remove_namespaces ||:
    k8s.remove_persistentvolumes ||:
    k8s.remove_modules    ||:

    SCRIPT="$(mktemp)"
    k8s.on_remote > "$SCRIPT"

    echo 'reinit each node'

    REMOTE='/tmp/reinit'
    function reinstall.remote() {

        local -r h="${1:?}"

        printf '%s starting %s\n' "$(date -Ins)" "$h"
        k8s.run scp "$SCRIPT" "$h:$REMOTE"
        # shellcheck disable=SC2029
        ssh "$h" "chmod 755 '$REMOTE'"
        # shellcheck disable=SC2029
        k8s.run ssh "$h" "sudo '$REMOTE'"
        k8s.log_elapsed "${h}"
        # shellcheck disable=SC2029
        ssh "$h" "[ -e '$REMOTE' ] && rm '$REMOTE'"
    }

    k8s.run_in_parallel 'reinstall.remote' "${K8S_NODES[@]}"
    rm "$SCRIPT"
    DEBUG=1

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.reinstall_cluster() {

    [ -d current ] && rm -rf current
    mkdir current
    :> ./current/elapsed.times.txt

    k8s.separator k8s.reinit_nodes
    [ -z "$(which microk8s)" ] && exit 1
    k8s.separator k8s.add_nodes_to_cluster
    k8s.separator k8s.set_config
    k8s.separator k8s.enable_microk8s_modules
    k8s.separator k8s.customize_content
    k8s.separator k8s.add_new_content
    k8s.separator k8s.generate_token
    k8s.separator k8s.capture_config
    k8s.separator k8s.update_jenkins
    k8s.separator k8s.capture_ips_for_gui
    k8s.separator k8s.capture_status
}

# -----------------------------------------------------------------------------------
function k8s.remove_app() {

    [ "$#" -eq 0 ] && return 0
    local dir
    for dir in "$@"; do
        k8s.create_secrets_for_apps "$dir"
        k8s.load_namespace "$dir" 'delete'
    done
}

# -----------------------------------------------------------------------------------
function k8s.remove_content() {

    echo 'removing content'
    k8s.run "$KUBECTL" apply -f ./production/corends.ConfigMap.yml
    k8s.run "$KUBECTL" apply -f ./production/nginx-ingress.DaemonSet.yml

    k8s.load_namespace 'grafana' 'apply'
    k8s.load_namespace 'kubernetes-dashboard' 'apply'

    (k8s.load_namespace 'hubot' 'delete') ||:
    (k8s.load_namespace 'jenkins' 'delete') ||:
    (k8s.load_namespace 'kowl' 'delete') ||:
    (k8s.load_namespace 'recipes' 'delete') ||:
    (k8s.load_namespace 'smee' 'delete') ||:
    (k8s.load_namespace 'versions' 'delete') ||:

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.remove_modules() {

    [ -z "$(which microk8s)" ] && return 0
    echo 'removing modules to ease the pressure created by reinstall'
    local allowed=' ha-cluster '

    # get list of namespaces:
    local -a current
    mapfile -t current < <(microk8s status | awk 'BEGIN {show=0} {if ($1 == "disabled:") { show=0 } else if (show == 1) { print $1 } else if ($1 == "enabled:" ) {show=1}}')
    local module
    for module in "${current[@]}"; do
        grep -qs " ${module} " <<< "$allowed" && continue
        k8s.run sudo microk8s disable "$module"
    done
    echo
}

# -----------------------------------------------------------------------------------
function k8s.remove_namespaces() {

    [ -z "$(which microk8s)" ] && return 0

    echo 'removing namespaces to ease the pressure created by reinstall'
    local allowed=' kube-system kube-public kube-node-lease default ingress metallb-system monitoring '

    # get list of namespaces:
    local -a current
    mapfile current < <("$KUBECTL" get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

    local ns
    for ns in "${current[@]}"; do
        grep -qs " ${ns} " <<< "$allowed" && continue
        k8s.run "$KUBECTL" delete namespace "$ns"
    done
    echo
}

# -----------------------------------------------------------------------------------
function k8s.remove_persistentvolumes() {

    [ -z "$(which microk8s)" ] && return 0

    echo 'removing persistentVolumes to ease the pressure created by reinstall'

    # get list of PV's:
    local -a current
    mapfile current < <("$KUBECTL" get pv -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
    local pv
    for pv in "${current[@]}"; do
        k8s.run "$KUBECTL" delete pv "$pv"
    done
#    mapfile current < <("$KUBECTL" get pvc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
#    local pvc
#    for pvc in "${current[@]}"; do
#        k8s.run "$KUBECTL" delete pvc "$pv"
#    done
    echo
}

# -----------------------------------------------------------------------------------
function k8s.run() {
  {
      echo
      printf '\e[90m%s\e[0m ' "$@"
      echo
  } >&2
  "$@"
}

# -----------------------------------------------------------------------------------
function k8s.run_in_parallel() {

    local script="${1:?}"
    shift

    echo "start $# copies of $script"
    for h in "$@"; do
      ( k8s.run "$script" "$h" ) &> "/tmp/$h.log" &
    done

    echo '  wait for all jobs to complete'
    while [ "$(jobs -r -p)" ]; do
        wait
        jobs -nl
    done
    stty sane

    echo '  output log of each job'
    for h in "$@"; do
        [ -e "/tmp/$h.log" ] || continue
        cat "/tmp/$h.log"
        rm "/tmp/$h.log"
    done
    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.set_config() {

    echo 'setting kubectl config'
    local -r HOST="$(hostname -f)"

    local -r inf="$(getent passwd "$USER")"
    local -r uid="$(cut -d ':' -f 3 <<< "$inf")"
    local -r gid="$(cut -d ':' -f 4 <<< "$inf")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"

    sudo mkdir -p "${homeDir}/.kube"
    sudo chown -f -R "${uid}:${gid}" "${homeDir}/.kube"

    local cfgFile="${SNAP}/credentials/client.config"
    local ip="$(ip -4 -j address show scope global dynamic|jq -r '.[0].addr_info[].local')"
    local -r CONFIG_FILE="$(pwd)/current/config.${K8S_CLUSTERNAME}.home"

    if [ -e "$cfgFile" ]; then
        sed -i -e "s|https://127.0.0.1:16443|https://${ip}:16443|g" -e "s|microk8s|${K8S_CLUSTERNAME}|g" "$cfgFile"
        k8s.run cp "$cfgFile" "$localConfig"
    else
        k8s.run microk8s config > "$localConfig"
        sed -i -e "s|127.0.0.1|${ip}|g" "$localConfig"
    fi
    cp "$localConfig" "$CONFIG_FILE"

    function set_k8s_config() {
        local -r h="${1:?}"
        echo "setting k8s config on $h"
        mkdir -p "${homeDir}/.kube"
        scp "${HOST}:$CONFIG_FILE" "${homeDir}/.kube/config"
        sudo chown -R "${uid}:${gid}" "${homeDir}/.kube"
        sudo usermod -a -G microk8s "$(getent passwd "$uid"|cut -d ':' -f 1)"
    }

    k8s.run_in_parallel 'set_k8s_config' "${K8S_NODES[@]}"

    k8s.log_elapsed "${FUNCNAME[0]}"
}

# -----------------------------------------------------------------------------------
function k8s.separator() {

    echo
    echo "~~~$(printf ' %-30s' "$1")~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo

    $1
}

# -----------------------------------------------------------------------------------
function k8s.server_ip() {

    local -r inf="$(getent passwd "$USER")"
    local -r homeDir="$(cut -d ':' -f 6 <<< "$inf")"
    local -r localConfig="${homeDir}/.kube/config"

    python3 -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout)' < "$localConfig" | jq -r '.clusters[].cluster.server'
}

# -----------------------------------------------------------------------------------
function k8s.update_jenkins() {

    local -r tokenFile='tokens.inf'
    # shellcheck disable=SC1090,SC2154
    JENKINS_CREDS="$(source "$__SECRETS_FILE" ; echo "$jenkins")"
    if [ -f "$tokenFile" ]; then
        k8s.update_jenkins_config "$JENKINS_TOKEN_KEY" "$(grep 'token:' "$tokenFile" | awk '{print $2}')"
    fi

    local -r CONFIG_FILE="$(pwd)/config.${K8S_CLUSTERNAME}.home"
    if [ -f "$CONFIG_FILE" ]; then
        k8s.update_jenkins_config "$JENKINS_ADMIN_KEY" "$(grep 'token:' "$CONFIG_FILE" | awk '{print $2}')"
    fi
}

# -----------------------------------------------------------------------------------
function k8s.update_jenkins_config() {

    if [ -z "${JENKINS_CREDS:-}" ] || [ -z "${JENKINS_URL:-}" ]; then
        [ "${JENKINS_CREDS:-}" ] || printf '\x1b[31m**** ERROR: %s\x1b[0m\n' 'No credentials provided for Jenkins' >&2
        [ "${JENKINS_URL:-}" ] || printf '\x1b[31m**** ERROR: %s\x1b[0m\n' 'No URL provided for Jenkins' >&2
        exit 1
    fi

    local -r id="${1:?}"
    local -r newval="${2:?}"
    local -r configXml="$(mktemp)"

    local jenkins_crumb="$(curl -s -k -u "$JENKINS_CREDS" "${JENKINS_URL}"'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')"
    k8s.run curl -s -k -H "$jenkins_crumb" -X GET "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml" -o "$configXml"

    if [ "$(< "$configXml")" ]; then
        if grep -s '<password>' "$configXml"; then
            xmlstarlet edit --inplace --update '//password' --value "$newval" "$configXml"
#            jenkins_crumb="$(curl -s -k -u "$JENKINS_CREDS" "${JENKINS_URL}"'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')"
            k8s.run curl -s -k -u "$JENKINS_CREDS" -H "$jenkins_crumb" -H 'content-type:application/xml' -d @"$configXml" -X POST "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml"
        fi

        if grep -s '<secret>' "$configXml"; then
            xmlstarlet edit --inplace --update '//secret' --value "$newval" "$configXml"
#            jenkins_crumb="$(curl -s -k -u "$JENKINS_CREDS" "${JENKINS_URL}"'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')"
            k8s.run curl -s -k -u "$JENKINS_CREDS" -H "$jenkins_crumb" -H 'content-type:application/xml' -d @"$configXml" -X POST "${JENKINS_URL}/credentials/store/system/domain/_/credential/${id}/config.xml"
        fi
        rm "$configXml"
    fi
}

# -----------------------------------------------------------------------------------
