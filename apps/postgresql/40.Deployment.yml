apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app.kubernetes.io/component: postgres
    app.kubernetes.io/name: postgres
  annotations:
    deployment.kubernetes.io/revision: '1'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: postgres
      app.kubernetes.io/name: postgres
      prometheus.monitoring/service: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/component: postgres
        app.kubernetes.io/name: postgres
        prometheus.monitoring/service: postgres
    spec:
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
      containers:
        - name: postgres
          image: s2.ubuntu.home:5000/thirdparty/postgres:10.4
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: postgres
      serviceAccount: postgres
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        fsGroup: 65534
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
